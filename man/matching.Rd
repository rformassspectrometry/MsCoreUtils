% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/joinGraph.R, R/matching.R
\name{joinGraph}
\alias{joinGraph}
\alias{closest}
\alias{common}
\alias{join}
\title{Relaxed Value Matching}
\usage{
joinGraph(x, y, tolerance = 0, ppm = 0, FUN = dotproduct, ...)

closest(
  x,
  table,
  tolerance = Inf,
  ppm = 0,
  duplicates = c("keep", "closest", "remove"),
  nomatch = NA_integer_
)

common(
  x,
  table,
  tolerance = Inf,
  ppm = 0,
  duplicates = c("keep", "closest", "remove")
)

join(x, y, tolerance = 0, ppm = 0, type = c("outer", "left", "right", "inner"))
}
\arguments{
\item{x}{\code{numeric}, the values to be matched.}

\item{y}{\code{numeric}, the values to be joined. Should be sorted.}

\item{tolerance}{\code{numeric}, accepted tolerance. Could be of length one or
the same length as \code{table}.}

\item{ppm}{\code{numeric(1)} representing a relative, value-specific
parts-per-million (PPM) tolerance that is added to \code{tolerance}.}

\item{FUN}{\code{function}, similarity function that should be maximized.}

\item{\dots}{further arguments passed to \code{FUN}.}

\item{table}{\code{numeric}, the values to be matched against. In contrast to
\code{\link[=match]{match()}} \code{table} has to be sorted in increasing order.}

\item{duplicates}{\code{character(1)}, how to handle duplicated matches.}

\item{nomatch}{\code{numeric(1)}, if the difference
between the value in \code{x} and \code{table} is larger than
\code{tolerance} \code{nomatch} is returned.}

\item{type}{\code{character(1)}, defines how \code{x} and \code{y} should be joined. See
details for \code{join}.}
}
\value{
\code{joinGraph} returns a \code{list} with two columns, namely \code{x} and \code{y},
representing the index of the values in \code{x} matching the corresponding value
in \code{y} (or \code{NA} if the value does not match).

\code{closest} returns an \code{integer} vector of the same length as \code{x}
giving the closest position in \code{table} of the first match or \code{nomatch} if
there is no match.

\code{common} returns a \code{logical} vector of length \code{x} that is \code{TRUE} if the
element in \code{x} was found in \code{table}. It is similar to \code{\link{\%in\%}}.

\code{join} returns a \code{list} with two columns, namely \code{x} and \code{y},
representing the index of the values in \code{x} matching the corresponding value
in \code{y} (or \code{NA} if the value does not match).
}
\description{
These functions offer relaxed matching of one vector in another.
In contrast to the similar \code{\link[=match]{match()}} and \code{\link{\%in\%}} functions they
just accept \code{numeric} arguments but have an additional \code{tolerance}
argument that allows relaxed matching.
}
\details{
\code{joinGraph}: joins two \code{matrix} by mapping values in \code{x} with
values in \code{y} and \emph{vice versa} if they are similar enough (provided the
\code{tolerance} and \code{ppm} specified). For multiple matches in \code{x} or \code{y} all
possible combinations are evaluated using the similarity function \code{FUN}. The
combination that yield the highest return value of \code{FUN} is used for the final
match.

For \code{closest}/\code{common} the \code{tolerance} argument could be set to \code{0} to get
the same results as for \code{\link[=match]{match()}}/\code{\link{\%in\%}}. If it is set to \code{Inf} (default)
the index of the closest values is returned without any restriction.

It is not guaranteed that there is a one-to-one matching for neither the
\code{x} to \code{table} nor the \code{table} to \code{x} matching.

If multiple elements in \code{x} match a single element in \code{table} all their
corresponding indices are returned if \code{duplicates="keep"} is set (default).
This behaviour is identical to \code{\link[=match]{match()}}. For \code{duplicates="closest"} just
the closest element in \code{x} gets the corresponding index in \code{table} and
for \code{duplicates="remove"} all elements in \code{x} that match to the same element
in \code{table} are set to \code{nomatch}.

If a single element in \code{x} matches multiple elements in \code{table} the \emph{closest}
is returned for \code{duplicates="keep"} or \code{duplicates="duplicates"} (\emph{keeping}
multiple matches isn't possible in this case because the implementation relies
on \code{\link{findInterval}}). If the differences between \code{x} and the corresponding
matches in \code{table} are identical the lower index (the smaller element
in \code{table}) is returned. For \code{duplicates="remove"} all multiple matches
are returned as \code{nomatch} as above.

\code{join}: joins two \code{numeric} vectors by mapping values in \code{x} with
values in \code{y} and \emph{vice versa} if they are similar enough (provided the
\code{tolerance} and \code{ppm} specified). The function returns a \code{matrix} with the
indices of mapped values in \code{x} and \code{y}. Parameter \code{type} allows to define
how the vectors will be joined: \code{type = "left"}: values in \code{x} will be
mapped to values in \code{y}, elements in \code{y} not matching any value in \code{x} will
be discarded. \code{type = "right"}: same as \code{type = "left"} but for \code{y}.
\code{type = "outer"}: return matches for all values in \code{x} and in \code{y}.
\code{type = "inner"}: report only indices of values that could be mapped.
}
\note{
\code{closest} will replace all \code{NA} values in \code{x} by \code{nomatch} (that is identical
to the behaviour of \code{match}).

\code{join} is based on \code{closest(x, y, tolerance, duplicates = "closest")}.
That means for multiple matches just the closest one is reported.
}
\examples{

x <- matrix(
     c(100.001, 100.002, 300.01, 300.02, 1, 9, 1, 9),
       ncol = 2L, dimnames = list(c(), c("mz", "intensity"))
)
y <- matrix(
    c(100.0, 200.0, 300.002, 300.025, 300.0255, 9, 1, 1, 9, 1),
    ncol = 2L, dimnames = list(c(), c("mz", "intensity"))
)
joinGraph(x, y, ppm = 20)
## Define two vectors to match
x <- c(1, 3, 5)
y <- 1:10

## Compare match and closest
match(x, y)
closest(x, y)

## If there is no exact match
x <- x + 0.1
match(x, y) # no match
closest(x, y)

## Some new values
x <- c(1.11, 45.02, 556.45)
y <- c(3.01, 34.12, 45.021, 46.1, 556.449)

## Using a single tolerance value
closest(x, y, tolerance = 0.01)

## Using a value-specific tolerance accepting differences of 20 ppm
closest(x, y, tolerance = ppm(y, 20))

## Same using 50 ppm
closest(x, y, tolerance = ppm(y, 50))

## Sometimes multiple elements in `x` match to `table`
x <- c(1.6, 1.75, 1.8)
y <- 1:2
closest(x, y, tolerance = 0.5)
closest(x, y, tolerance = 0.5, duplicates = "closest")
closest(x, y, tolerance = 0.5, duplicates = "remove")

## Are there any common values?
x <- c(1.6, 1.75, 1.8)
y <- 1:2
common(x, y, tolerance = 0.5)
common(x, y, tolerance = 0.5, duplicates = "closest")
common(x, y, tolerance = 0.5, duplicates = "remove")

## Join two vectors
x <- c(1, 2, 3, 6)
y <- c(3, 4, 5, 6, 7)

jo <- join(x, y, type = "outer")
jo
x[jo$x]
y[jo$y]

jl <- join(x, y, type = "left")
jl
x[jl$x]
y[jl$y]

jr <- join(x, y, type = "right")
jr
x[jr$x]
y[jr$y]

ji <- join(x, y, type = "inner")
ji
x[ji$x]
y[ji$y]
}
\seealso{
\code{\link[=match]{match()}}

\code{\link{\%in\%}}

Other grouping/matching functions: 
\code{\link{bin}()}
}
\author{
\code{joinGraph}: Sebastian Gibb, Thomas Naake

Sebastian Gibb
}
\concept{grouping/matching functions}
